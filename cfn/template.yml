# template.yml

Resources:

  # ECR repository to store Docker images
  ImageRepository:
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: !Ref AppName

  # IAM role and policy for ECS tasks
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonECS_FullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

  # Security group for ECS tasks
  ECSServiceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the ECS tasks
      SecurityGroupIngress:
       - CidrIp: 0.0.0.0/0 
         IpProtocol: -1

  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AppName
      RetentionInDays: 14

  # The ECS cluster
  ECSCluster: 
    Type: AWS::ECS::Cluster
    Properties: 
      ClusterName: !Ref AppName

  # The ECS task definition 
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: LogGroup
    Properties:
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSTaskExecutionRole
      Family: !Ref AppName
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: !Ref AppName
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ImageRepository}:latest
          PortMappings:
            - ContainerPort: 3000 
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
      
  # The ECS Service      
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ECSTaskDefinition
    Properties:
      ServiceName: !Ref AppName
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ECSTaskDefinition
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50 
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ECSServiceSG
          Subnets: 
            - subnet-1234abcd
            - subnet-5678efgh
      LoadBalancers:
        - ContainerName : !Ref AppName
          ContainerPort: 3000
          TargetGroupArn: !Ref ALBTargetGroup
                
  # Application Load Balancer            
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing  
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      SecurityGroups: [!Ref ALBSecurityGroup]
      Subnets:
        - subnet-1234abcd
        - subnet-5678efgh
      Tags:
        - Key: Name
          Value: !Sub ${AppName} ALB

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup 
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 3000
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPC
  
  # Allow ALB to communicate with ECS
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access from ALB to ECS
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
      
  # API Gateway REST API
  RestAPI:
    Type: AWS::ApiGateway::RestApi
    Properties: 
      Name: !Ref AppName
  
  # API Gateway resource
  Resource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestAPI.RootResourceId
      PathPart: api
      RestApiId: !Ref RestAPI

  # API Gateway POST method
  PostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref Resource
      RestApiId: !Ref RestAPI
      Integration:
        Type: HTTP_PROXY
        Uri: !Join 
          - ''
          - - 'http://'
            - !GetAtt ALB.DNSName
      MethodResponses:
        - StatusCode: 200
          
  # API Gateway deployment
  Deployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: PostMethod
    Properties:
      RestApiId: !Ref RestAPI
      StageName: prod

  # Allow API Gateway to access the ALB    
  APIGatewayInvokeRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: invoke
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'elasticloadbalancing:*'
                Resource: '*'
                
  # Allow API Gateway to assume the invoke role            
  APIGatewayInvokePolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      Roles: [!Ref APIGatewayInvokeRole]
      PolicyName: !Sub ${AppName}-invoke
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 'execute-api:Invoke'
            Resource:
              !Join 
              - /
              - - 'arn:aws:execute-api:'
                - !Ref 'AWS::Region'
                - ':' 
                - !Ref 'AWS::AccountId'
                - ':'
                - !Ref RestAPI
                - /*/*